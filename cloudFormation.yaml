AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy an S3 bucket, Lambda functions, Glue jobs, EventBridge rules, and an SNS topic for notifications.

Resources:
  # S3 Bucket
  FinstockBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: finstockbucket12
    DeletionPolicy: Delete

  # Lambda Layer for requests library from an existing bucket
  RequestsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: RequestsLayer
      Content:
        S3Bucket: finstockbucket001
        S3Key: layers/python.zip
      CompatibleRuntimes:
        - python3.12

  # Lambda Function 1: FetchTickersLambda
  FetchTickersLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FetchTickersLambda
      Handler: index.lambda_handler
      Role: arn:aws:iam::697643150634:role/LabRole
      Code:
        ZipFile: |
          import json
          import boto3
          import requests

          events_client = boto3.client('events')
          s3 = boto3.client('s3')
          polygon_api_key = "vS5DqXeWT0Jgu_28xJweTe8kIcMpF2UW"
          url = f"https://api.polygon.io/v3/reference/tickers?market=stocks&active=true&limit=1000&sort=ticker&apiKey={polygon_api_key}"
          s3_key = "bronzeLayer/allTickersData.json"

          def lambda_handler(event, context):
              try:
                  response = requests.get(url)
                  response.raise_for_status()
                  data = response.json()
                  dataFile = json.dumps(data)
                  s3.put_object(Bucket="finstockbucket12", Key=s3_key, Body=dataFile)
          
                  # Send event to EventBridge
                  events_client.put_events(
                      Entries=[
                          {
                              'Source': 'custom.fetchTickersLambda',
                              'DetailType': 'FetchTickersComplete',
                              'Detail': json.dumps({
                                  'status': 'success',
                                  's3_key': s3_key
                              }),
                              'EventBusName': 'default'
                          }
                      ]
                  )
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Data Upload to S3 Successful!')
                  }
              except requests.exceptions.HTTPError as http_err:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'HTTP error occurred: {str(http_err)}')
                  }
              except Exception as e:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'Error: {str(e)}')
                  }
      Runtime: python3.12
      Timeout: 600
      Layers:
        - !Ref RequestsLayer
    DependsOn: FinstockBucket

  # Lambda Function 2: FetchParticularTicker
  FetchParticularTicker:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FetchParticularTicker
      Handler: index.lambda_handler
      Role: arn:aws:iam::697643150634:role/LabRole
      Code:
        ZipFile: |
          import json
          import boto3
          import requests

          events_client = boto3.client('events')
          s3 = boto3.client('s3')
          polygon_api_key = "vS5DqXeWT0Jgu_28xJweTe8kIcMpF2UW"
          
          def lambda_handler(event, context):
              start_date = event.get("startDate")
              end_date = event.get("endDate")
              ticker = event.get("tickerName")
              s3_key = f"bronzeLayer/{ticker}userData.json"

              if not start_date or not end_date or not ticker:
                  return {
                      'statusCode': 400,
                      'body': json.dumps('Missing required parameters: startDate, endDate, and ticker must be provided.')
                  }

              url = f"https://api.polygon.io/v2/aggs/ticker/{ticker}/range/1/day/{start_date}/{end_date}?adjusted=true&sort=asc&limit=5000&apiKey={polygon_api_key}"

              try:
                  response = requests.get(url)
                  response.raise_for_status()
                  data = response.json()
                  data_file = json.dumps(data)
                  s3.put_object(Bucket="finstockbucket12", Key=s3_key, Body=data_file)
          
                  # Send event to EventBridge
                  events_client.put_events(
                      Entries=[
                          {
                              'Source': 'custom.fetchParticularTickerLambda',
                              'DetailType': 'FetchParticularTickerComplete',
                              'Detail': json.dumps({
                                  'status': 'success',
                                  's3_key': s3_key
                              }),
                              'EventBusName': 'default'
                          }
                      ]
                  )
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Data Upload to S3 Successful!')
                  }
              except requests.exceptions.HTTPError as http_err:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'HTTP error occurred: {str(http_err)}')
                  }
              except json.JSONDecodeError as json_err:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'Error decoding JSON: {str(json_err)}')
                  }
              except Exception as e:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'Error: {str(e)}')
                  }
      Runtime: python3.12
      Timeout: 600
      Layers:
        - !Ref RequestsLayer
    DependsOn: FinstockBucket

  # Glue Job 1: FetchAllTickersETL
  FetchAllTickersETL:
    Type: AWS::Glue::Job
    Properties:
      Name: "fetchAllTickersETL"
      Role: arn:aws:iam::697643150634:role/LabRole
      Command:
        Name: "glueetl"
        ScriptLocation: "s3://finstockbucket001/etlscripts/FetchAllTickersEtl.py"
        PythonVersion: "3"
      DefaultArguments:
        "--job-language": "python"
        "--s3_input_key": "bronzeLayer/allTickersData.json"
      GlueVersion: "3.0"
      MaxCapacity: 2.0
      Timeout: 10
    DependsOn: FinstockBucket

  # Glue Job 2: FetchUserTickerETL
  FetchUserTickerETL:
    Type: AWS::Glue::Job
    Properties:
      Name: "fetchUserTickerETL"
      Role: arn:aws:iam::697643150634:role/LabRole
      Command:
        Name: "glueetl"
        ScriptLocation: "s3://finstockbucket001/etlscripts/FetchUserTickerEtl.py"
        PythonVersion: "3"
      DefaultArguments:
        "--job-language": "python"
        "--s3_input_key": "bronzeLayer/someTickerUserData.json"
      GlueVersion: "3.0"
      MaxCapacity: 2.0
      Timeout: 10
    DependsOn: FinstockBucket

  # Lambda Function 3: TriggerGlueJobsLambda
  TriggerGlueJobsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TriggerGlueJobsLambda
      Handler: index.lambda_handler
      Role: arn:aws:iam::697643150634:role/LabRole
      Code:
        ZipFile: |
          import json
          import boto3

          glue_client = boto3.client('glue')

          def lambda_handler(event, context):
              print("Received event:", json.dumps(event, indent=2))  # Log the event for debugging

              # Extract details from the event
              detail = event.get('detail', {})
              s3_key = detail.get('s3_key')

              if not s3_key:
                  print("No S3 key found in the event detail.")
                  return {
                      'statusCode': 400,
                      'body': json.dumps('No S3 key found in the event detail.')
                  }

              # Determine which Glue job to trigger based on S3 key
              if s3_key.endswith('allTickersData.json'):
                  glue_job_name = 'fetchAllTickersETL'
              elif s3_key.endswith('userData.json'):
                  glue_job_name = 'fetchUserTickerETL'
              else:
                  print(f"Unknown S3 key: {s3_key}")
                  return {
                      'statusCode': 400,
                      'body': json.dumps('Unknown S3 key.')
                  }

              # Start the Glue job
              try:
                  response = glue_client.start_job_run(
                      JobName=glue_job_name,
                      Arguments={
                          '--s3_input_key': s3_key
                      }
                  )
                  print(f"Started Glue job {glue_job_name}: {response['JobRunId']}")
                  return {
                      'statusCode': 200,
                      'body': json.dumps(f'Glue job {glue_job_name} triggered successfully!')
                  }
              except Exception as e:
                  print(f"Error starting Glue job {glue_job_name}: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error starting Glue job {glue_job_name}: {str(e)}')
                  }
      Runtime: python3.12
      Timeout: 600

  # Lambda Function 4: SendNotificationLambda
  SendNotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SendNotificationLambda
      Handler: index.lambda_handler
      Role: arn:aws:iam::697643150634:role/LabRole
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          sns_client = boto3.client('sns')

          def lambda_handler(event, context):
              sns_topic_arn = os.environ['SNS_TOPIC_ARN']
              print("Received event:", json.dumps(event, indent=2))  # Log the event for debugging

              message = {
                  "default": "ETL job succeeded.",
                  "email": "ETL job succeeded. Output available in S3."
              }

              response = sns_client.publish(
                  TopicArn=sns_topic_arn,
                  Message=json.dumps(message),
                  Subject="ETL Job Notification"
              )

              print(f"Notification sent: {response['MessageId']}")

              return {
                  'statusCode': 200,
                  'body': json.dumps('Notification sent successfully!')
              }
      Runtime: python3.12
      Timeout: 600
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic

  # EventBridge Rule to trigger Lambda on FetchTickersLambda completion
  FetchTickersRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger TriggerGlueJobsLambda on FetchTickersLambda completion"
      EventPattern:
        source:
          - "custom.fetchTickersLambda"
        detail-type:
          - "FetchTickersComplete"
      Targets:
        - Arn: !GetAtt TriggerGlueJobsLambda.Arn
          Id: "TriggerGlueJobsLambdaTargetFetchTickers"

  # EventBridge Rule to trigger Lambda on FetchParticularTicker completion
  FetchParticularTickerRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger TriggerGlueJobsLambda on FetchParticularTicker completion"
      EventPattern:
        source:
          - "custom.fetchParticularTickerLambda"
        detail-type:
          - "FetchParticularTickerComplete"
      Targets:
        - Arn: !GetAtt TriggerGlueJobsLambda.Arn
          Id: "TriggerGlueJobsLambdaTargetFetchParticularTicker"

  # Lambda Permission for EventBridge rules to invoke TriggerGlueJobsLambda
  LambdaEventBridgePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref TriggerGlueJobsLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt FetchTickersRule.Arn

  LambdaEventBridgePermission2:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref TriggerGlueJobsLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt FetchParticularTickerRule.Arn

  # SNS Topic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: FinStockNotifications

  # SNS Topic Subscription
  SNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSTopic
      Protocol: email
      Endpoint: 'pathakkunj1212@gmail.com'  # Replace with your email address

  # CloudWatch Rule to trigger Notification Lambda on all Glue job state changes
  GlueJobCompletionRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger Notification Lambda on all Glue job state changes"
      EventPattern:
        source:
          - "aws.glue"
        detail-type:
          - "AWS Glue Job State Change"
        detail:
          state:
            - "SUCCEEDED"
            - "FAILED"
            - "STOPPED"
      Targets:
        - Arn: !GetAtt SendNotificationLambda.Arn
          Id: "SendNotificationLambdaTarget"

  # Lambda Permission for CloudWatch to invoke SendNotificationLambda
  LambdaCloudWatchPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref SendNotificationLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt GlueJobCompletionRule.Arn

Outputs:
  FetchTickersLambdaArn:
    Description: ARN of the FetchTickersLambda function
    Value: !GetAtt FetchTickersLambda.Arn

  FetchParticularTickerArn:
    Description: ARN of the FetchParticularTicker function
    Value: !GetAtt FetchParticularTicker.Arn

  TriggerGlueJobsLambdaArn:
    Description: ARN of the TriggerGlueJobsLambda function
    Value: !GetAtt TriggerGlueJobsLambda.Arn

  SendNotificationLambdaArn:
    Description: ARN of the SendNotificationLambda function
    Value: !GetAtt SendNotificationLambda.Arn

  SNSTopicArn:
    Description: ARN of the SNS topic for notifications
    Value: !Ref SNSTopic
