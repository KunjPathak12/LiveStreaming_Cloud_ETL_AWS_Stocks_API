AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy an S3 bucket, two Lambda functions with a 10-minute timeout and Python 3.12 runtime, and an EventBridge rule to trigger a Glue job.

Resources:
  # S3 Bucket
  FinstockBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: finstockbucket12
    DeletionPolicy: Delete


  # Lambda Layer for requests library from an existing bucket
  RequestsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: RequestsLayer
      Content:
        S3Bucket: finstockbucket001
        S3Key: layers/python.zip
      CompatibleRuntimes:
        - python3.11
        - python3.12

  # Lambda Function 1: FetchTickersLambda
  FetchTickersLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FetchTickersLambda
      Handler: index.lambda_handler
      Role: arn:aws:iam::697643150634:role/LabRole
      Code:
        ZipFile: |
          import json
          import boto3
          import requests

          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              polygon_api_key = "vS5DqXeWT0Jgu_28xJweTe8kIcMpF2UW"
              url = f"https://api.polygon.io/v3/reference/tickers?market=stocks&active=true&limit=1000&sort=ticker&apiKey={polygon_api_key}"
              s3_key = "bronzeLayer/allTickersData.json"

              try:
                  response = requests.get(url)
                  response.raise_for_status()
                  data = response.json()
                  dataFile = json.dumps(data)
                  s3.put_object(Bucket="finstockbucket12", Key=s3_key, Body=dataFile)
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Data Upload to S3 Successful!')
                  }
              except requests.exceptions.HTTPError as http_err:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'HTTP error occurred: {str(http_err)}')
                  }
              except Exception as e:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'Error: {str(e)}')
                  }
      Runtime: python3.12
      Timeout: 600  # 10 minutes
      Layers:
        - !Ref RequestsLayer
    DependsOn: FinstockBucket

  # Lambda Function 2: FetchParticularTicker
  FetchParticularTicker:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FetchParticularTicker
      Handler: index.lambda_handler
      Role: arn:aws:iam::697643150634:role/LabRole
      Code:
        ZipFile: |
          import json
          import boto3
          import requests

          def lambda_handler(event, context):
              s3 = boto3.client('s3')
              polygon_api_key = "vS5DqXeWT0Jgu_28xJweTe8kIcMpF2UW"
              start_date = event.get("startDate")
              end_date = event.get("endDate")
              ticker = event.get("tickerName")
              s3_key = f"bronzeLayer/{ticker}userData.json"

              if not start_date or not end_date or not ticker:
                  return {
                      'statusCode': 400,
                      'body': json.dumps('Missing required parameters: startDate, endDate, and ticker must be provided.')
                  }

              url = f"https://api.polygon.io/v2/aggs/ticker/{ticker}/range/1/day/{start_date}/{end_date}?adjusted=true&sort=asc&limit=5000&apiKey={polygon_api_key}"

              try:
                  response = requests.get(url)
                  response.raise_for_status()
                  data = response.json()
                  data_file = json.dumps(data)
                  s3.put_object(Bucket="finstockbucket12", Key=s3_key, Body=data_file)
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Data Upload to S3 Successful!')
                  }
              except requests.exceptions.HTTPError as http_err:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'HTTP error occurred: {str(http_err)}')
                  }
              except json.JSONDecodeError as json_err:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'Error decoding JSON: {str(json_err)}')
                  }
              except Exception as e:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'Error: {str(e)}')
                  }
      Runtime: python3.12
      Timeout: 600  # 10 minutes
      Layers:
        - !Ref RequestsLayer
    DependsOn: FinstockBucket

  # EventBridge Rule to trigger Glue job on S3 file creation or overwrite
  #  S3EventBridgeRule:
  #    Type: AWS::Events::Rule
  #    Properties:
  #      Name: S3FileUploadRule
  #      EventPattern:
  #        source:
  #          - "aws.s3"
  #        detail-type:
  #          - "Object Created"
  #        detail:
  #          bucket:
  #            name:
  #              - "finstockbucket12"
  #          object:
  #            key:
  #              prefix: "bronzeLayer/"
  #      State: ENABLED
  #      Targets:
  #        - Arn: !GetAtt GlueJob.Arn
  #          Id: "GlueJobTarget"
  #    DependsOn: FinstockBucket

  # Glue Job
#  GlueJob:
#    Type: AWS::Glue::Job
#    Properties:
#      Name: "S3FileProcessingJob"
#      Role: arn:aws:iam::697643150634:role/LabRole
#      Command:
#        Name: "glueetl"
#        ScriptLocation: "s3://path-to-your-glue-script/etl-script.py"
#        PythonVersion: "3"
#      DefaultArguments:
#        "--job-language": "python"
#      GlueVersion: "3.0"
#      MaxCapacity: 2.0
#    DependsOn: FinstockBucket

Outputs:
  FetchTickersLambdaArn:
    Description: ARN of the FetchTickersLambda function
    Value: !GetAtt FetchTickersLambda.Arn

  FetchParticularTickerArn:
    Description: ARN of the FetchParticularTicker function
    Value: !GetAtt FetchParticularTicker.Arn
