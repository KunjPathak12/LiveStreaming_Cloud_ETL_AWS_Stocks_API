AWSTemplateFormatVersion: '2010-09-09'
Description: Kunj Pathak CSCI 5411 Term Project Deployment Stack

Resources:
  FinstockBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: finstockbucket12
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - "*"  
            AllowedMethods:
              - GET
            AllowedHeaders:
              - "*"
            MaxAge: 3000
    DeletionPolicy: Delete

  # Lambda Layer for requests library from an existing bucket
  RequestsLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: RequestsLayer
      Content:
        S3Bucket: finstockbucket001
        S3Key: layers/python.zip
      CompatibleRuntimes:
        - python3.12

  # Lambda Function 1: FetchTickersLambda
  FetchTickersLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FetchTickersLambda
      Handler: index.lambda_handler
      Role: arn:aws:iam::186444712243:role/LabRole
      Code:
        ZipFile: |
          import json
          import boto3
          import requests

          events_client = boto3.client('events')
          s3 = boto3.client('s3')
          polygon_api_key = "vS5DqXeWT0Jgu_28xJweTe8kIcMpF2UW"
          url = f"https://api.polygon.io/v3/reference/tickers?market=stocks&active=true&limit=1000&sort=ticker&apiKey={polygon_api_key}"
          s3_key = "bronzeLayer/allTickersData.json"

          def lambda_handler(event, context):
              try:
                  response = requests.get(url)
                  response.raise_for_status()
                  data = response.json()
                  dataFile = json.dumps(data)
                  s3.put_object(Bucket="finstockbucket12", Key=s3_key, Body=dataFile)
          
                  # Send event to EventBridge
                  events_client.put_events(
                      Entries=[
                          {
                              'Source': 'custom.fetchTickersLambda',
                              'DetailType': 'FetchTickersComplete',
                              'Detail': json.dumps({
                                  'status': 'success',
                                  's3_key': s3_key
                              }),
                              'EventBusName': 'default'
                          }
                      ]
                  )
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Data Upload to S3 Successful!')
                  }
              except requests.exceptions.HTTPError as http_err:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'HTTP error occurred: {str(http_err)}')
                  }
              except Exception as e:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'Error: {str(e)}')
                  }
      Runtime: python3.12
      Timeout: 600
      Layers:
        - !Ref RequestsLayer
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet
        SecurityGroupIds:
          - !Ref PrivateSecurityGroup
    DependsOn: FinstockBucket

  # Lambda Function 2: FetchParticularTicker
  FetchParticularTicker:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: FetchParticularTicker
      Handler: index.lambda_handler
      Role: arn:aws:iam::186444712243:role/LabRole
      Code:
        ZipFile: |
          import json
          import boto3
          import requests

          events_client = boto3.client('events')
          s3 = boto3.client('s3')
          polygon_api_key = "vS5DqXeWT0Jgu_28xJweTe8kIcMpF2UW"
          
          def lambda_handler(event, context):
              start_date = event.get("startDate")
              end_date = event.get("endDate")
              ticker = event.get("tickerName")
              s3_key = f"bronzeLayer/{ticker}userData.json"

              if not start_date or not end_date or not ticker:
                  return {
                      'statusCode': 400,
                      'body': json.dumps('Missing required parameters: startDate, endDate, and ticker must be provided.')
                  }

              url = f"https://api.polygon.io/v2/aggs/ticker/{ticker}/range/1/day/{start_date}/{end_date}?adjusted=true&sort=asc&limit=5000&apiKey={polygon_api_key}"

              try:
                  response = requests.get(url)
                  response.raise_for_status()
                  data = response.json()
                  data_file = json.dumps(data)
                  s3.put_object(Bucket="finstockbucket12", Key=s3_key, Body=data_file)
          
                  # Send event to EventBridge
                  events_client.put_events(
                      Entries=[
                          {
                              'Source': 'custom.fetchParticularTickerLambda',
                              'DetailType': 'FetchParticularTickerComplete',
                              'Detail': json.dumps({
                                  'status': 'success',
                                  's3_key': s3_key
                              }),
                              'EventBusName': 'default'
                          }
                      ]
                  )
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Data Upload to S3 Successful!')
                  }
              except requests.exceptions.HTTPError as http_err:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'HTTP error occurred: {str(http_err)}')
                  }
              except json.JSONDecodeError as json_err:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'Error decoding JSON: {str(json_err)}')
                  }
              except Exception as e:
                  return {
                      'statusCode': 400,
                      'body': json.dumps(f'Error: {str(e)}')
                  }
      Runtime: python3.12
      Timeout: 600
      Layers:
        - !Ref RequestsLayer
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet
        SecurityGroupIds:
          - !Ref PrivateSecurityGroup
    DependsOn: FinstockBucket

  # Lambda Function 3: TriggerGlueJobsLambda
  TriggerGlueJobsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: TriggerGlueJobsLambda
      Handler: index.lambda_handler
      Role: arn:aws:iam::186444712243:role/LabRole
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import time

          glue_client = boto3.client('glue')
          events_client = boto3.client('events')
          sns_client = boto3.client('sns')
          sns_topic_arn = os.environ['SNS_TOPIC_ARN']

          def lambda_handler(event, context):
              print("Received event:", json.dumps(event, indent=2))  # Log the event for debugging

              # Extract details from the event
              detail = event.get('detail', {})
              s3_key = detail.get('s3_key')

              if not s3_key:
                  print("No S3 key found in the event detail.")
                  return {
                      'statusCode': 400,
                      'body': json.dumps('No S3 key found in the event detail.')
                  }

              # Determine which Glue job to trigger based on S3 key
              if s3_key.endswith('allTickersData.json'):
                  glue_job_name = 'fetchAllTickersETL'
              elif s3_key.endswith('userData.json'):
                  glue_job_name = 'fetchUserTickerETL'
              else:
                  print(f"Unknown S3 key: {s3_key}")
                  return {
                      'statusCode': 400,
                      'body': json.dumps('Unknown S3 key.')
                  }

              # Start the Glue job
              try:
                  response = glue_client.start_job_run(
                      JobName=glue_job_name,
                      Arguments={
                          '--s3_input_key': s3_key
                      }
                  )
                  job_run_id = response['JobRunId']
                  print(f"Started Glue job {glue_job_name}: {job_run_id}")

                  # Wait for the Glue job to complete (with a timeout)
                  timeout = 600  # Set your timeout (in seconds)
                  interval = 60   # Check every 15 seconds

                  for _ in range(timeout // interval):
                      job_run = glue_client.get_job_run(JobName=glue_job_name, RunId=job_run_id)
                      job_status = job_run['JobRun']['JobRunState']
                      if job_status in ['SUCCEEDED', 'FAILED', 'STOPPED']:
                          break
                      time.sleep(interval)

                  # Send notification to SNS about the job completion
                  sns_message = f"Glue job '{glue_job_name}' completed with status: {job_status}."
                  sns_client.publish(
                      TopicArn=sns_topic_arn,
                      Message=sns_message,
                      Subject=f"Glue Job Completed: {glue_job_name}"
                  )

                  # Send event to EventBridge
                  events_client.put_events(
                      Entries=[
                          {
                              'Source': 'custom.triggerGlueJobsLambda',
                              'DetailType': 'GlueJobCompletion',
                              'Detail': json.dumps({
                                  'job_name': glue_job_name,
                                  'job_run_id': job_run_id,
                                  'status': job_status,
                                  's3_key': s3_key,
                              }),
                              'EventBusName': 'default'
                          }
                      ]
                  )

                  return {
                      'statusCode': 200,
                      'body': json.dumps(f'Glue job {glue_job_name} triggered successfully with run ID {job_run_id}!')
                  }
              except Exception as e:
                  print(f"Error starting Glue job {glue_job_name}: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error starting Glue job {glue_job_name}: {str(e)}')
                  }
      Runtime: python3.12
      Timeout: 600
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet
        SecurityGroupIds:
          - !Ref PrivateSecurityGroup
    DependsOn: SNSTopic

  # Lambda Function 4: SendNotificationLambda
  SendNotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: SendNotificationLambda
      Handler: index.lambda_handler
      Role: arn:aws:iam::186444712243:role/LabRole
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          sns_client = boto3.client('sns')

          def lambda_handler(event, context):
              sns_topic_arn = os.environ['SNS_TOPIC_ARN']
              print("Received event:", json.dumps(event, indent=2))  # Log the event for debugging

              # Extract S3 key and job status from the event
              detail = event.get('detail', {})
              s3_key = detail.get('s3_key')
              s3_bucket = "finstockbucket12"  

              # Create the S3 file URL
              s3_url = f"https://{s3_bucket}.s3.amazonaws.com/{s3_key}"

              message = {
                  "default": f"ETL job '{detail.get('job_name')}' completed with status: {detail.get('status')}.",
                  "email": f"ETL job '{detail.get('job_name')}' completed with status: {detail.get('status')}. Output available in S3: {s3_url}"
              }
              print(message)
              response = sns_client.publish(
                  TopicArn=sns_topic_arn,
                  Message=json.dumps(message),
                  Subject=f"ETL Job Notification"
              )

              print(f"Notification sent: {response['MessageId']}")

              return {
                  'statusCode': 200,
                  'body': json.dumps('Notification sent successfully!')
              }
      Runtime: python3.12
      Timeout: 600
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref SNSTopic
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet
        SecurityGroupIds:
          - !Ref PrivateSecurityGroup

  # Glue Job 1: FetchAllTickersETL
  FetchAllTickersETL:
    Type: AWS::Glue::Job
    Properties:
      Name: "fetchAllTickersETL"
      Role: arn:aws:iam::186444712243:role/LabRole
      Command:
        Name: "glueetl"
        ScriptLocation: "s3://finstockbucket001/etlscripts/FetchAllTickersEtl.py"
        PythonVersion: "3"
      DefaultArguments:
        "--job-language": "python"
      GlueVersion: "3.0"
      MaxCapacity: 2.0
      Timeout: 10
    DependsOn: FinstockBucket

  # Glue Job 2: FetchUserTickerETL
  FetchUserTickerETL:
    Type: AWS::Glue::Job
    Properties:
      Name: "fetchUserTickerETL"
      Role: arn:aws:iam::186444712243:role/LabRole
      Command:
        Name: "glueetl"
        ScriptLocation: "s3://finstockbucket001/etlscripts/FetchUserTickerEtl.py"
        PythonVersion: "3"
      DefaultArguments:
        "--job-language": "python"
      GlueVersion: "3.0"
      MaxCapacity: 2.0
      Timeout: 10
    DependsOn: FinstockBucket

  # EventBridge Rule to trigger Lambda on FetchTickersLambda completion
  FetchTickersRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger TriggerGlueJobsLambda on FetchTickersLambda completion"
      EventPattern:
        source:
          - "custom.fetchTickersLambda"
        detail-type:
          - "FetchTickersComplete"
      Targets:
        - Arn: !GetAtt TriggerGlueJobsLambda.Arn
          Id: "TriggerGlueJobsLambdaTargetFetchTickers"

  # EventBridge Rule to trigger Lambda on FetchParticularTicker completion
  FetchParticularTickerRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger TriggerGlueJobsLambda on FetchParticularTicker completion"
      EventPattern:
        source:
          - "custom.fetchParticularTickerLambda"
        detail-type:
          - "FetchParticularTickerComplete"
      Targets:
        - Arn: !GetAtt TriggerGlueJobsLambda.Arn
          Id: "TriggerGlueJobsLambdaTargetFetchParticularTicker"

  # Lambda Permission for EventBridge rules to invoke TriggerGlueJobsLambda
  LambdaEventBridgePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref TriggerGlueJobsLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt FetchTickersRule.Arn

  LambdaEventBridgePermission2:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref TriggerGlueJobsLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt FetchParticularTickerRule.Arn

  # SNS Topic
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: FinStockNotifications

  # SNS Topic Subscription
  SNSTopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref SNSTopic
      Protocol: email
      Endpoint: 'pathakkunj1212@gmail.com'  # Replace with your email address

  # CloudWatch Rule to trigger Notification Lambda on all Glue job state changes
  GlueJobCompletionRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Trigger Notification Lambda on all Glue job state changes"
      EventPattern:
        source:
          - "aws.glue"
        detail-type:
          - "AWS Glue Job State Change"
        detail:
          state:
            - "SUCCEEDED"
            - "FAILED"
            - "STOPPED"
      Targets:
        - Arn: !GetAtt SendNotificationLambda.Arn
          Id: "SendNotificationLambdaTarget"

  # Lambda Permission for CloudWatch to invoke SendNotificationLambda
  LambdaCloudWatchPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref SendNotificationLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt GlueJobCompletionRule.Arn

  # VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      AvailabilityZone: "us-east-1a"
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet

  # Route Table for Private Subnet
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  # Associating the private route table to the private subnet
  PrivateRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for Private Subnet
  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Private Subnet Security Group"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "0"
          ToPort: "65535"
          CidrIp: "10.0.0.0/16"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"

  # Public Subnet 1
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: MyPublicSubnet

  # Public Subnet 2
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.3.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: MyPublicSubnet2

  # Internet Gateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  # Attach Internet Gateway to VPC
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Route Table for Public Subnet
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: MyPublicRouteTable

  # Route for Internet access in Public Subnet
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # Associate Public Subnet 1 with Route Table
  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # Associate Public Subnet 2 with Route Table
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Security Group for ALB
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow HTTP access to ALB'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'

  # Security Group for EC2 Instances
  PrivateEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow HTTP access from ALB'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"

  # Application Load Balancer
  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn: AttachGateway
    Properties:
      Name: 'MyAppALB'
      Subnets:
        - !Ref PublicSubnet
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: 'idle_timeout.timeout_seconds'
          Value: '60'
      Scheme: 'internet-facing'
      Type: 'application'
      IpAddressType: 'ipv4'

  # ALB Target Group
  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref MyVPC
      Protocol: HTTP
      Port: 80
      TargetType: instance
      HealthCheckPath: '/actuator/health'
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  # ALB Listener
  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  # EC2 Instances
  EC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-095a8f574cb0ac0d0'
      KeyName: 'finstockkey'
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref PrivateEC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y openjdk-17-jdk
          apt-get install -y git
          apt-get install -y docker.io
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ubuntu 
          docker pull kunjpathak/finstock:latest
          docker run -p 8080:8080 kunjpathak/finstock:latest

  EC2Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-095a8f574cb0ac0d0'
      KeyName: 'finstockkey'
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref PrivateEC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y openjdk-17-jdk
          apt-get install -y git
          apt-get install -y docker.io
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ubuntu 
          docker pull kunjpathak/finstock:latest
          docker run -p 8080:8080 kunjpathak/finstock:latest

  EC2Instance3:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-095a8f574cb0ac0d0'
      KeyName: 'finstockkey'
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref PrivateEC2SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install -y openjdk-17-jdk
          apt-get install -y git
          apt-get install -y docker.io
          systemctl start docker
          systemctl enable docker
          usermod -aG docker ubuntu 
          docker pull kunjpathak/finstock:latest
          docker run -p 8080:8080 kunjpathak/finstock:latest
          

#Outputs:
#  # S3 Bucket Outputs
#  BucketName:
#    Description: "The name of the S3 bucket"
#    Value: !Ref FinstockBucket
#
#  BucketURL:
#    Description: "URL for accessing the public folder"
#    Value: !Sub "https://s3.amazonaws.com/finstockbucket12/public-folder/"
#
#  # Application Load Balancer (ALB) Output
#  ALBArn:
#    Description: "ARN of the Application Load Balancer"
#    Value: !GetAtt ALB.Arn
#
#  ALBName:
#    Description: "Name of the Application Load Balancer"
#    Value: !Ref ALB
#
#  # Lambda Function Outputs
#  FetchTickersLambdaArn:
#    Description: ARN of the FetchTickersLambda function
#    Value: !GetAtt FetchTickersLambda.Arn
#
#  FetchParticularTickerArn:
#    Description: ARN of the FetchParticularTicker function
#    Value: !GetAtt FetchParticularTicker.Arn
#
#  TriggerGlueJobsLambdaArn:
#    Description: ARN of the TriggerGlueJobsLambda function
#    Value: !GetAtt TriggerGlueJobsLambda.Arn
#
#  SendNotificationLambdaArn:
#    Description: ARN of the SendNotificationLambda function
#    Value: !GetAtt SendNotificationLambda.Arn
#
#  # SNS Topic for Notifications
#  SNSTopicArn:
#    Description: ARN of the SNS topic for notifications
#    Value: !Ref SNSTopic
#
#  # Instance IDs for EC2 Instances
#  EC2Instance1Id:
#    Description: "Instance ID of EC2 Instance 1"
#    Value: !Ref EC2Instance1
#
#  EC2Instance2Id:
#    Description: "Instance ID of EC2 Instance 2"
#    Value: !Ref EC2Instance2
#
#  EC2Instance3Id:
#    Description: "Instance ID of EC2 Instance 3"
#    Value: !Ref EC2Instance3
#
#  # VPC and Subnet Information
#  VPCId:
#    Description: "VPC ID"
#    Value: !Ref MyVPC
#
#  PublicSubnetId:
#    Description: "Public Subnet ID (for ALB)"
#    Value: !Ref PublicSubnet
#
#  PrivateSubnetId:
#    Description: "Private Subnet ID (for EC2 instances)"
#    Value: !Ref PrivateSubnet
